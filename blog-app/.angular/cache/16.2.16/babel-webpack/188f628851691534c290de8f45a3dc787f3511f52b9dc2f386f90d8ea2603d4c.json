{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BlogService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5177/api/posts'; // או ה-API שלך\n  }\n\n  getPosts() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Error loading posts', error);\n      return throwError('Failed to load posts');\n    }));\n  }\n  createPost(post) {\n    return this.http.post(this.apiUrl, post).pipe(catchError(error => {\n      console.error('Error creating post', error);\n      return throwError('Failed to create post');\n    }));\n  }\n  getPostById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Error loading post by id', error);\n      return throwError('Failed to load post details');\n    }));\n  }\n  static {\n    this.ɵfac = function BlogService_Factory(t) {\n      return new (t || BlogService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BlogService,\n      factory: BlogService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","BlogService","constructor","http","apiUrl","getPosts","get","pipe","error","console","createPost","post","getPostById","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\MatrixHomeWork\\frontend\\blog-app\\src\\app\\blog.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BlogService {\n  private apiUrl = 'http://localhost:5177/api/posts'; // או ה-API שלך\n\n  constructor(private http: HttpClient) {}\n\n  getPosts(): Observable<any> {\n    return this.http.get<any>(this.apiUrl).pipe(\n      catchError(error => {\n        console.error('Error loading posts', error);\n        return throwError('Failed to load posts');\n      })\n    );\n  }\n\n  createPost(post: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, post).pipe(\n      catchError(error => {\n        console.error('Error creating post', error);\n        return throwError('Failed to create post');\n      })\n    );\n  }\n\n  getPostById(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\n      catchError(error => {\n        console.error('Error loading post by id', error);\n        return throwError('Failed to load post details');\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC,CAAC,CAAC;EAEb;;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CACzCP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAOT,UAAU,CAAC,sBAAsB,CAAC;IAC3C,CAAC,CAAC,CACH;EACH;EAEAW,UAAUA,CAACC,IAAS;IAClB,OAAO,IAAI,CAACR,IAAI,CAACQ,IAAI,CAAM,IAAI,CAACP,MAAM,EAAEO,IAAI,CAAC,CAACJ,IAAI,CAChDP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAOT,UAAU,CAAC,uBAAuB,CAAC;IAC5C,CAAC,CAAC,CACH;EACH;EAEAa,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,IAAIS,EAAE,EAAE,CAAC,CAACN,IAAI,CACpDP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAOT,UAAU,CAAC,6BAA6B,CAAC;IAClD,CAAC,CAAC,CACH;EACH;;;uBA9BWE,WAAW,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhB,WAAW;MAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}