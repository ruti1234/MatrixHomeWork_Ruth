{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BlogComponent = class BlogComponent {\n  constructor(blogService) {\n    this.blogService = blogService;\n    this.posts = [];\n    this.postDetails = null;\n    this.newPost = {};\n  }\n  ngOnInit() {\n    this.blogService.getPosts().subscribe(posts => {\n      this.posts = posts;\n    }, error => {\n      console.error('Failed to load posts', error);\n    });\n  }\n  createPost() {\n    this.blogService.createPost(this.newPost).subscribe();\n  }\n  loadPostDetails(id) {\n    this.blogService.getPostById(id).subscribe(post => {\n      this.blogService.getPosts().subscribe(allPosts => {\n        this.postDetails = {\n          ...post,\n          totalPosts: allPosts.length\n        };\n      });\n    });\n  }\n};\nBlogComponent = __decorate([Component({\n  selector: 'app-blog',\n  template: `\n    <ul>\n      <li *ngFor=\"let post of posts\" (click)=\"loadPostDetails(post.id)\">\n        {{ post.title }}\n      </li>\n    </ul>\n    <div *ngIf=\"postDetails\">\n      <h2>{{ postDetails.title }}</h2>\n      <p>{{ postDetails.description }}</p>\n    </div>\n    <h1>Create New Post</h1>\n    <form (submit)=\"createPost()\">\n      <label>Title: </label>\n      <input [(ngModel)]='test'\">\n      <label>Description: </label>\n      <input [(ngModel)]=\"newPost.description\">\n      <label>Content: </label>\n      <textarea [(ngModel)]=\"newPost.content\"></textarea>\n      <button type=\"submit\">Submit</button>\n    </form>\n  `\n})], BlogComponent);","map":{"version":3,"names":["Component","BlogComponent","constructor","blogService","posts","postDetails","newPost","ngOnInit","getPosts","subscribe","error","console","createPost","loadPostDetails","id","getPostById","post","allPosts","totalPosts","length","__decorate","selector","template"],"sources":["C:\\MatrixHomeWork\\frontend\\blog-app\\src\\app\\blog\\blog.component.ts"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { BlogService } from '../blog.service';\n\n@Component({\n  selector: 'app-blog',\n  template: `\n    <ul>\n      <li *ngFor=\"let post of posts\" (click)=\"loadPostDetails(post.id)\">\n        {{ post.title }}\n      </li>\n    </ul>\n    <div *ngIf=\"postDetails\">\n      <h2>{{ postDetails.title }}</h2>\n      <p>{{ postDetails.description }}</p>\n    </div>\n    <h1>Create New Post</h1>\n    <form (submit)=\"createPost()\">\n      <label>Title: </label>\n      <input [(ngModel)]='test'\">\n      <label>Description: </label>\n      <input [(ngModel)]=\"newPost.description\">\n      <label>Content: </label>\n      <textarea [(ngModel)]=\"newPost.content\"></textarea>\n      <button type=\"submit\">Submit</button>\n    </form>\n  `,\n})\nexport class BlogComponent implements OnInit {\n  posts: any[] = [];\n  postDetails: any = null;\n  newPost: any = {};\n  constructor(private blogService: BlogService) {}\n\n  ngOnInit() {\n  \n    this.blogService.getPosts().subscribe(\n      posts => {\n        this.posts = posts;\n      },\n      error => {\n        console.error('Failed to load posts', error);\n      }\n    );\n  }\n  createPost(): void {\n   \n    this.blogService.createPost( this.newPost).subscribe();\n  }\n  loadPostDetails(id: number) {\n   \n    this.blogService.getPostById(id).subscribe(post => {\n      this.blogService.getPosts().subscribe(allPosts => {\n        this.postDetails = {\n          ...post,\n          totalPosts: allPosts.length,\n        };\n      });\n    });\n  }\n}"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AA2B1C,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIxBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAH/B,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,WAAW,GAAQ,IAAI;IACvB,KAAAC,OAAO,GAAQ,EAAE;EAC8B;EAE/CC,QAAQA,CAAA;IAEN,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE,CAACC,SAAS,CACnCL,KAAK,IAAG;MACN,IAAI,CAACA,KAAK,GAAGA,KAAK;IACpB,CAAC,EACDM,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EACAE,UAAUA,CAAA;IAER,IAAI,CAACT,WAAW,CAACS,UAAU,CAAE,IAAI,CAACN,OAAO,CAAC,CAACG,SAAS,EAAE;EACxD;EACAI,eAAeA,CAACC,EAAU;IAExB,IAAI,CAACX,WAAW,CAACY,WAAW,CAACD,EAAE,CAAC,CAACL,SAAS,CAACO,IAAI,IAAG;MAChD,IAAI,CAACb,WAAW,CAACK,QAAQ,EAAE,CAACC,SAAS,CAACQ,QAAQ,IAAG;QAC/C,IAAI,CAACZ,WAAW,GAAG;UACjB,GAAGW,IAAI;UACPE,UAAU,EAAED,QAAQ,CAACE;SACtB;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;CACD;AAhCYlB,aAAa,GAAAmB,UAAA,EAxBzBpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;CAqBX,CAAC,C,EACWrB,aAAa,CAgCzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}